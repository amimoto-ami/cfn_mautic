{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This is AMIAGE Mautic Stack made by CloudFormation.\n",
  "Mappings": {
    "MPAMIs": {
      "eu-west-1": {
        "AMI": "ami-386dd34b"
      },
      "ap-southeast-1": {
        "AMI": "ami-ecc8008f"
      },
      "ap-southeast-2": {
        "AMI": "ami-c36849a0"
      },
      "eu-central-1": {
        "AMI": "ami-186b8e77"
      },
      "ap-northeast-2": {
        "AMI": "ami-d75d93b9"
      },
      "ap-northeast-1": {
        "AMI": "ami-e048448e"
      },
      "us-east-1": {
        "AMI": "ami-6d310807"
      },
      "sa-east-1": {
        "AMI": "ami-7c028010"
      },
      "us-west-1": {
        "AMI": "ami-43e59523"
      },
      "us-west-2": {
        "AMI": "ami-e8f91588"
      }
    }
  },
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 key pair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "AvailabilityZone": {
      "Description": "Pick an AvailabilityZone for Primary Subnet. Public subnet will creates in here.",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "SecondaryAvailabilityZone": {
      "Description": "Pick an AvailabilityZone for Secondary Subnet.This zone is used by RDS.",
      "Type": "AWS::EC2::AvailabilityZone::Name"
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "c3.large",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "MySQLPassword": {
      "Description": "Password of RDS User",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "64",
      "NoEcho": "true"
    },
    "MulitiAZDatabase": {
      "Description": "Crate a Multi-AZ RDS Database Instance",
      "Default": "false",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "must be either true or false"
    },
    "RDSInstanceType": {
      "Description": "RDS Instance Type",
      "Default": "db.t2.medium",
      "Type": "String",
      "AllowedValues": [
        "db.t2.micro",
        "db.t2.small",
        "db.t2.medium",
        "db.m1.small",
        "db.m1.medium",
        "db.m1.large",
        "db.m1.xlarge",
        "db.m3.medium",
        "db.m3.large",
        "db.m3.xlarge",
        "db.m3.2xlarge",
        "db.m2.xlarge",
        "db.m2.2xlarge",
        "db.m2.4xlarge",
        "db.r3.large",
        "db.r3.xlarge",
        "db.r3.2xlarge",
        "db.r3.4xlarge",
        "db.r3.8xlarge"
      ],
      "ConstraintDescription": "Must be a valid RDS Instance Type."
    },
    "DBAllocatedStorage": {
      "Default": "20",
      "Description": "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "3072",
      "ConstraintDescription": "must be between 5 and 3072Gb."
    }
  },
  "Conditions": {
    "CreateSecDB": {
      "Fn::Equals": [
        {
          "Ref": "MulitiAZDatabase"
        },
        true
      ]
    }
  },
  "Resources": {
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "AssociationRtToPubSub": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "InternetGateway": {
      "DependsOn": "VPC",
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "AttachGatewayToVPC": {
      "DependsOn": [
        "VPC",
        "InternetGateway"
      ],
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGatewayToVPC",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "EC2WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "EC2WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "EC2",
      "Properties": {
        "Handle": {
          "Ref": "EC2WaitHandle"
        },
        "Timeout": "1800"
      }
    },
    "EC2": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "AttachGatewayToVPC",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/opt/aws/cloud_formation.json": {
                "content": "{\n\t  \"rds\" : {\n\t\t\"database\" : \"rdsdb\",\n\t\t\"username\" : \"amiage\",\n\t\t\"password\" : \"{{password}}\",\n\t\t\"endpoint\" : \"{{endpoint}}\",\n\t\t\"port\"     : 3306\n\t  }\n\t}",
                "context": {
                  "endpoint": {
                    "Fn::GetAtt": [
                      "RDS",
                      "Endpoint.Address"
                    ]
                  },
                  "password": {
                    "Ref": "MySQLPassword"
                  }
                },
                "mode": "00644",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "DisableApiTermination": "false",
        "EbsOptimized": "false",
        "ImageId": {
          "Fn::FindInMap": [
            "MPAMIs",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Monitoring": "false",
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "Tenancy": "default",
        "SecurityGroupIds": [
          {
            "Ref": "SecurityGroupInstance"
          },
          {
            "Ref": "SecurityGroupInternal"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMForEC2"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r EC2 ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "until [ -f /var/www/html/install_amiage.php ]  ; do sleep 5 ; done",
                "\n",
                "sleep 2",
                "\n",
                "/usr/bin/chef-apply /opt/lw1/cfn_appendix/cfn_appendix.rb --json-attributes /opt/aws/cloud_formation.json",
                "\n",
                "/opt/aws/bin/cfn-signal -e $? -r \"CFn setup complete\" '",
                {
                  "Ref": "EC2WaitHandle"
                },
                "'\n"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "HasRDS",
            "Value": "true"
          }
        ]
      }
    },
    "RDSSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "MapPublicIpOnLaunch": "false",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "RDSSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": {
          "Ref": "SecondaryAvailabilityZone"
        },
        "MapPublicIpOnLaunch": "false",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
        "SubnetIds": [
          {
            "Ref": "RDSSubnet1"
          },
          {
            "Ref": "RDSSubnet2"
          }
        ]
      }
    },
    "RDSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "This is Simple RDS SecurityGroup made by CloudFormation",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "SourceSecurityGroupId": {
              "Ref": "SecurityGroupInstance"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "SourceSecurityGroupId": {
              "Ref": "SecurityGroupInstance"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "RDS": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy": "Snapshot",
      "Properties": {
        "AllocatedStorage": {
          "Ref": "DBAllocatedStorage"
        },
        "AllowMajorVersionUpgrade": "true",
        "AutoMinorVersionUpgrade": "true",
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "BackupRetentionPeriod": "1",
        "DBInstanceClass": {
          "Ref": "RDSInstanceType"
        },
        "DBName": "rdsdb",
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "Engine": "MariaDB",
        "MasterUsername": "amiage",
        "MasterUserPassword": {
          "Ref": "MySQLPassword"
        },
        "MultiAZ": {
          "Ref": "MulitiAZDatabase"
        },
        "Port": "3306",
        "PreferredBackupWindow": "00:00-00:30",
        "PreferredMaintenanceWindow": "sun:16:00-sun:17:30",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "VPCSecurityGroups": [
          {
            "Ref": "RDSSecurityGroup"
          }
        ]
      }
    },
    "SecurityGroupPublic": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SG for ELB",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "SecurityGroupInstance": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SG for EC2 Instance",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "SecurityGroupInternal": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow connect between EC2 Instance and ELB",
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "SecurityGroupInternalSelfIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "DependsOn": "SecurityGroupInternal",
      "Properties": {
        "GroupId": {
          "Ref": "SecurityGroupInternal"
        },
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupInternal"
        },
        "IpProtocol": "tcp",
        "ToPort": "65535",
        "FromPort": "0"
      }
    },
    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": "AttachGatewayToVPC",
      "Properties": {
        "Subnets": [
          {
            "Ref": "PublicSubnet"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "TCP:80",
          "Timeout": "10",
          "UnhealthyThreshold": "2"
        },
        "Listeners": [
          {
            "InstancePort": "80",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "InstanceProtocol": "HTTP"
          }
        ],
        "Instances": [
          {
            "Ref": "EC2"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "SecurityGroupInternal"
          },
          {
            "Ref": "SecurityGroupPublic"
          }
        ]
      }
    },
    "IAMRoleForEC2": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }
        },
        "Path": "/"
      }
    },
    "IAMForEC2": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleForEC2"
          }
        ]
      }
    }
  },
  "Outputs": {
    "EC2InstanceId": {
      "Description": "Access for the first time, Please input it.",
      "Value": {
        "Ref": "EC2"
      }
    },
    "WebSiteURL": {
      "Description": "Site URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ELB",
                "DNSName"
              ]
            }
          ]
        ]
      }
    },
    "RDSEndpoint": {
      "Description": "Endpoint of RDS",
      "Value": {
        "Fn::GetAtt": [
          "RDS",
          "Endpoint.Address"
        ]
      }
    }
  }
}
